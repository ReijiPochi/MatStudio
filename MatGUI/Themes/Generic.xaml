<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:MatGUI">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/MatGUI;component/ResourceDictionaries.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <Style x:Key="MatFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Stroke="{DynamicResource MatFocusBorderBrush}" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:MatButton}">
        <Setter Property="Background" Value="{DynamicResource MatBackGroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource MatForeGroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MatButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnClick1">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.50"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid">
                        <Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <Rectangle x:Name="rectangle" Fill="{DynamicResource MatClickBrush}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MatMouseOverBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="MonoColorIcon" Value="True">
                            <Setter Property="Effect" TargetName="contentPresenter" Value="{DynamicResource MonoColorEffect}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MatPressDownBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Effect" TargetName="contentPresenter" Value="{DynamicResource InvalidMonoColorEffect}"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource OnClick1}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PhantasmagoriaTabControl}">
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource MatBackGroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MatBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PhantasmagoriaTabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TabPanel Grid.Row="0" Margin="0" x:Name="HeaderPanel" Background="Transparent" IsItemsHost="True" Panel.ZIndex="100" KeyboardNavigation.TabIndex="1"/>

                        <Border Grid.Row="1" x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>
                        </Border>

                        <Rectangle x:Name="IBPosRect" Grid.RowSpan="2" Visibility="Collapsed" Fill="{DynamicResource MatThemeColorBrush}" Panel.ZIndex="101" Opacity="0.39" Grid.Row="0"/>
                        <Rectangle x:Name="IBMaskRect" Fill="#4C808080" Grid.RowSpan="2" Visibility="Collapsed" AllowDrop="True" Panel.ZIndex="102" Grid.Row="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PhantasmagoriaTabItem}">
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource MatForeGroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PhantasmagoriaTabItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Margin="0" x:Name="Border">
                            <ContentPresenter HorizontalAlignment="Left" Margin="12,3,12,3" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header"/>
                        </Border>
                        <Rectangle x:Name="MatMaskRect" AllowDrop="True" Fill="Transparent"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MatBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsActivePanel" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MatThemeColorBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MatMouseOverBrush}" TargetName="Border"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <local:MatMenuItem Header="Close"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PhantasmagoriaSplitter}">
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Background" Value="#00000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PhantasmagoriaSplitter}">
                    <Border Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PhantasmagoriaWorkspaceFrame}">
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Background" Value="#00000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PhantasmagoriaWorkspaceFrame}">
                    <Border Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:MatScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MatScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="view" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Grid.ColumnSpan="2" Grid.RowSpan="2" Margin="{TemplateBinding Padding}" CanVerticallyScroll="True" CanHorizontallyScroll="True"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Orientation="Horizontal"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}"
                                   Style="{StaticResource MatScrollBarStyle}" Height="15" MinHeight="15"/>
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" x:Name="PART_VerticalScrollBar" Orientation="Vertical" 
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}"
                                   Style="{StaticResource MatScrollBarStyle}" Width="15" MinWidth="15"/>
                        <Rectangle x:Name="rectangle" Fill="{DynamicResource MatBackGroundBrush}" Height="15" Width="15" Grid.Row="1" Grid.Column="1" StrokeThickness="0" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Visibility" Value="Visible" SourceName="PART_VerticalScrollBar">
                            <Setter Property="Grid.ColumnSpan" TargetName="view" Value="1"/>
                        </Trigger>
                        <Trigger Property="Visibility" Value="Visible" SourceName="PART_HorizontalScrollBar">
                            <Setter Property="Grid.RowSpan" TargetName="view" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Visibility" Value="Visible" SourceName="PART_VerticalScrollBar"/>
                                <Condition Property="Visibility" Value="Visible" SourceName="PART_HorizontalScrollBar"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
                            <Setter Property="Grid.RowSpan" TargetName="PART_VerticalScrollBar" Value="1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:MatTextBox}">
        <Setter Property="Background" Value="{DynamicResource MatBackGroundBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource MatFocusVisual}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource MatSelectedBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource MatEditableForeGroundBruah}"/>
        <Setter Property="SelectionOpacity" Value="0.5"/>
        <Setter Property="CaretBrush" Value="{DynamicResource MatThemeColorBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MatTextBox}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="1">
                            <local:MatScrollViewer Padding="10,0" x:Name="PART_ContentHost" Background="{TemplateBinding Background}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   HorizontalContentAlignment="Stretch"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="AcceptsReturn" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MatMouseOverBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource MatFocusBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{DynamicResource MatBackGroundBrush}" >
            <Grid>
                <ContentPresenter 
					Margin="10,3" 
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center" />
                <Popup 
					x:Name="Popup"
					Placement="Bottom"
					IsOpen="{TemplateBinding IsSubmenuOpen}"
					AllowsTransparency="True" 
					Focusable="False"
					PopupAnimation="Fade">
                    <Border 
						x:Name="SubmenuBorder"
						SnapsToDevicePixels="True" >
                        <StackPanel  
							IsItemsHost="True" 
							KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource MatFocusBrush_T}"/>
            </Trigger>
            <Trigger Property="IsOpen" Value="True" SourceName="Popup">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource MatBackGroundBrush_T}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MatInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- TopLevelItem -->
    <ControlTemplate 
		x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" >
            <Grid>
                <ContentPresenter 
					Margin="6,3" 
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background"
					Value="{DynamicResource MatBackGroundBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground"
					Value="{DynamicResource MatInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- SubmenuItem -->
    <ControlTemplate 
		x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{DynamicResource MatBackGroundBrush_T}" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Border 
					x:Name="Check"  
					Width="13" Height="13" 
					Visibility="Collapsed"
					Margin="6,3,6,3" 
					BorderThickness="1">
                    <Path 
						x:Name="CheckMark"
						Width="7" Height="7" 
						Visibility="Hidden" 
						SnapsToDevicePixels="False" 
						Stroke="{DynamicResource MatForeGroundBrush}"
						StrokeThickness="2"
						Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1"
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center" Margin="0,3"/>
                <TextBlock x:Name="InputGestureText"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="23,2,0,2"
					DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource MatFocusBrush_T}"/>
                <Setter Property="Foreground" Value="{DynamicResource MatSelectedForeGroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource MatInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- SubmenuHeader -->
    <ControlTemplate 
		x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" >
            <Grid x:Name="grid" Background="{DynamicResource MatBackGroundBrush_T}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					VerticalAlignment="Center"
					ContentSource="Icon" HorizontalAlignment="Center"/>
                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1"
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center"/>
                <TextBlock x:Name="InputGestureText"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="5,2,2,2"
					DockPanel.Dock="Right"/>
                <Path 
					Grid.Column="3"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Data="M 0 0 L 0 7 L 4 3.5 Z" 
					Fill="{DynamicResource MatForeGroundBrush}" />
                <Popup 
					x:Name="Popup"
					Placement="Right" 
					IsOpen="{TemplateBinding IsSubmenuOpen}"
					AllowsTransparency="True" 
					Focusable="False"
					PopupAnimation="None" VerticalOffset="7">
                    <Border 
						x:Name="SubmenuBorder"
						SnapsToDevicePixels="True" >
                        <StackPanel  
							IsItemsHost="True" 
							KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="grid" Value="{DynamicResource MatFocusBrush_T}"/>
                <Setter Property="Foreground" Value="{DynamicResource MatSelectedForeGroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource MatInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style TargetType="{x:Type local:MatMenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource MatForeGroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:MatWorkspace}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MatWorkspace}">
                    <Grid x:Name="contentsParent">

                        <ContentPresenter/>

                        <local:PhantasmagoriaWorkspaceFrame HorizontalAlignment="Left" Width="3" Panel.ZIndex="114514"/>
                        <local:PhantasmagoriaWorkspaceFrame Width="3" Panel.ZIndex="114514" HorizontalAlignment="Right"/>
                        <local:PhantasmagoriaWorkspaceFrame HorizontalAlignment="Stretch" Panel.ZIndex="114514" VerticalAlignment="Top" Height="3"/>
                        <local:PhantasmagoriaWorkspaceFrame HorizontalAlignment="Stretch" Panel.ZIndex="114514" VerticalAlignment="Bottom" Height="3"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:MatControlPanelBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MatControlPanelBase}">

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
